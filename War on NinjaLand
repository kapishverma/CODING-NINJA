
import java.util.ArrayList;
import java.util.Scanner;

 class QueueEmptyException extends Exception {
}

 class QueueUsingLL<T> {

	class Node<T> {
		T data;
		Node<T> next;
		Node(T data){
			this.data = data;
		}
	}

	private Node<T> head;
	private Node<T> tail;
	private int size = 0;

	public int size(){
		return size;
	}

	public boolean isEmpty(){
		if(size == 0){
			return true;
		}
		return false;
	}

	public T front() throws QueueEmptyException{
		if(size == 0){
			QueueEmptyException e = new QueueEmptyException();
			throw e;
		}

		return head.data;
	}


	public void enqueue(T element){
		Node<T> newNode = new Node<T>(element);

		if(head == null){
			head = newNode;
			tail = newNode;
		}
		else{
			tail.next = newNode;
			tail = newNode;
		}

		size++;
	}

	public T dequeue() throws QueueEmptyException{
		if(head == null){
			QueueEmptyException e = new QueueEmptyException();
			throw e;
		}
		if(head == tail){
			tail = null;
		}
		T temp = head.data;
		head = head.next;
		size--;
		return temp;
	}
}

   class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}

public class Runner {



	static Scanner s = new Scanner(System.in);

	public static TreeNode<Integer> takeInputLevelWise(){
		QueueUsingLL<TreeNode<Integer>> pendingNodes = new QueueUsingLL<TreeNode<Integer>>();  // Queue of nodes that are entered themselves but their children aren't added yet
		int rootData = s.nextInt();
		TreeNode<Integer> root = new TreeNode<Integer>(rootData);
		pendingNodes.enqueue(root);
		while(!pendingNodes.isEmpty()){
			TreeNode<Integer> currentNode;
			try {
				currentNode = pendingNodes.dequeue();
				int numChild = s.nextInt();
				for(int i = 0 ; i < numChild; i++){
					int currentChild = s.nextInt();
					TreeNode<Integer> childNode = new TreeNode<Integer>(currentChild);
					pendingNodes.enqueue(childNode);
					currentNode.children.add(childNode);
				}
			} catch (QueueEmptyException e) {
			}
		}
		return root;
	}


	public static void main(String[] args) {

        TreeNode<Integer> root =  takeInputLevelWise();
        int allowed;
        allowed = s.nextInt();
        int final_ans = Solution.minLandingCover(root);
		Solution.printAns(allowed, final_ans);

	}

}
//___________________________________________________________________________
public class Solution
{

    static int minLandingCover(TreeNode<Integer> root) {
        //Write your code here
         if(root == null) return 0;
        int[] A = new int[3];
        A[0] = 0;	// min no. of landings
        A[1] = 0;	// covered? 0 is false; 1 is true;
        A[2] = 0;	// landing here? 0 is false; 1 is true;
        fun(root, A);
        if(A[1] == 0) A[0]++;
        return A[0];
    }

    static void fun(TreeNode<Integer> root, int[] A){
        int n = root.children.size();
        if(n == 0){		// no children; leaf node; needs cover
            A[1] = 0;
            A[2] = 0;
            return;
        }
        boolean landHere = false,
        		covered = false;
        for(int i = 0; i < n; i++){
            fun(root.children.get(i), A);
            if(A[2] == 0 && A[1] == 0) landHere = true;
            if(A[2] == 1) covered = true;
        }
        if(landHere){
            A[0]++;
            covered = true;
            A[1] = 1;
            A[2] = 1;
        }
        else{	// no landing necessary here
            A[2] = 0;
            if(covered){
                A[1] = 1;
            }
        	else A[1] = 0;
        }
    }

    static void printAns(int allowed, int ans)
    {
        if (ans <= allowed)
        {
            System.out.println(ans + " Mission Successful");
        }
        else{
            System.out.println(ans + " Mission Unsuccessful");
        }
    }

}
